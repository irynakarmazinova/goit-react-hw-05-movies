{"version":3,"sources":["components/Navigation/Navigation.jsx","services/moviesApi.js","components/MoviesList/MoviesList.jsx","views/HomeView/HomeView.jsx","views/MoviesView/MoviesView.jsx","components/Cast/Cast.jsx","views/MovieDetailsView/MovieDetailsView.jsx","views/NotFoundView/NotFoundView.jsx","App.js","index.js"],"names":["Navigation","className","exact","to","activeClassName","API_KEY","a","axios","get","resp","data","results","getFilmsByQuery","query","id","res","cast","MoviesList","moviesArr","location","useLocation","map","movie","pathname","state","from","name","search","title","HomeView","useState","movies","setMovies","useEffect","getTrendingFilms","then","defaults","baseURL","MovieView","setQuery","history","useHistory","serchQuery","URLSearchParams","onSubmit","e","preventDefault","push","onChange","target","value","type","Cast","movieId","setCast","getCastInfo","actor","MovieDetailsPage","movieDetails","setMovieDetails","useParams","url","useRouteMatch","getFilmById","onClick","src","backdrop_path","alt","path","NotFoundView","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oPAGe,SAASA,IACtB,OACE,sBAAKC,UAAU,MAAf,UACE,cAAC,IAAD,CAASC,OAAK,EAACC,GAAG,IAAIF,UAAU,OAAOG,gBAAgB,eAAvD,kBAIA,cAAC,IAAD,CAASD,GAAG,UAAUF,UAAU,OAAOG,gBAAgB,eAAvD,uB,qDCRAC,EAAU,mC,4CAwBT,4BAAAC,EAAA,sEACcC,IAAMC,IAAN,uCAA0CH,IADxD,cACCI,EADD,yBAEEA,EAAKC,KAAKC,SAFZ,4C,sBAMA,SAAeC,EAAtB,kC,4CAAO,WAA+BC,GAA/B,iBAAAP,EAAA,sEAGKC,IAAMC,IAAI,yBAA2BH,EAAU,UAAYQ,GAHhE,uBAEKF,EAFL,EAEHD,KAAQC,QAFL,kBAKEA,GALF,4C,kEAQA,WAA2BG,GAA3B,iBAAAR,EAAA,sEACkBC,IAAM,UAAD,OAAWO,EAAX,oBAAyBT,IADhD,uBACGK,EADH,EACGA,KADH,kBAEEA,GAFF,4C,kEAKA,WAA2BI,GAA3B,eAAAR,EAAA,sEACaC,IAAMC,IAAN,iBAAoBM,EAApB,4BAA0CT,IADvD,cACCU,EADD,yBAGEA,EAAIL,KAAKM,MAHX,4C,sBC3CQ,SAASC,EAAT,GAAoC,IAAdC,EAAa,EAAbA,UAE7BC,EAAWC,cAEjB,OACE,6BACGF,EAAUG,KAAI,SAAAC,GAAK,OAClB,6BACE,cAAC,IAAD,CACEnB,GAAI,CACFoB,SAAS,WAAD,OAAaD,EAAMR,IAC3BU,MAAO,CACLC,KAC6B,MAA3BN,EAASI,SAASG,KACd,IACA,UAAYP,EAASQ,SAPjC,SAWGL,EAAMM,SAZFN,EAAMR,SCJR,SAASe,IACtB,MAA4BC,mBAAS,IAArC,mBAAOC,EAAP,KAAeC,EAAf,KAMA,OAJAC,qBAAU,YFkBL,WAAP,gCEjBIC,GAAmBC,KAAKH,KACvB,IAGD,sBAAK/B,UAAU,MAAf,UACE,oBAAIA,UAAU,QAAd,4BACA,uBAEA,cAACgB,EAAD,CAAYC,UAAWa,OFd7BxB,IAAM6B,SAASC,QAAU,+B,YGGV,SAASC,IAEtB,MAA0BR,mBAAS,IAAnC,mBAAOjB,EAAP,KAAc0B,EAAd,KACA,EAA4BT,mBAAS,IAArC,mBAAOC,EAAP,KAAeC,EAAf,KAEMQ,EAAUC,cACVtB,EAAWC,cAEXsB,EAAa,IAAIC,gBAAgBxB,EAASQ,QAAQnB,IAAI,SAG5DyB,qBAAU,WACJS,IACF9B,EAAgB8B,GAAYP,KAAKH,GACjCO,EAASG,MAEV,CAACA,IAaJ,OACE,sBAAKzC,UAAU,MAAf,UAEE,uBAAM2C,SAVO,SAAAC,GACfA,EAAEC,iBAEFlC,EAAgBC,GAAOsB,KAAKH,GAC5BQ,EAAQO,KAAR,2BAAkBP,EAAQrB,UAA1B,IAAoCQ,OAAO,UAAD,OAAYd,OAMpD,UACE,uBACEmC,SAhBS,SAAAH,GACfN,EAASM,EAAEI,OAAOC,QAgBZC,KAAK,OACLD,MAAOrC,EACPZ,UAAU,UAEZ,wBAAQkD,KAAK,SAASlD,UAAU,MAAhC,uBAKF,cAACgB,EAAD,CAAYC,UAAWa,OC7Cd,SAASqB,EAAT,GAA4B,IAAZC,EAAW,EAAXA,QAG7B,EAAwBvB,mBAAS,IAAjC,mBAAOd,EAAP,KAAasC,EAAb,KAEiBlC,cAQjB,OALAa,qBAAU,YJgCL,SAAP,mCI/BIsB,CAAYF,GAASlB,KAAKmB,KACzB,CAACD,IAIF,6BACGrC,EAAKK,KAAI,SAAAmC,GAAK,OACb,6BACE,4BAAIA,EAAM9B,QADH8B,EAAM1C,SCPR,SAAS2C,IACtB,MAAwC3B,mBAAS,MAAjD,mBAAO4B,EAAP,KAAqBC,EAArB,KACQN,EAAYO,cAAZP,QAEFb,EAAUC,cACVtB,EAAWC,cACTyC,EAAQC,cAARD,IAGR5B,qBAAU,YLiBL,SAAP,mCKhBI8B,CAAYV,GAASlB,KAAKwB,KACzB,CAACN,IAUJ,OAAKK,EAMH,gCACE,wBACEM,QAde,WAAO,IAAD,GACzB,UAAI7C,EAASK,aAAb,aAAI,EAAgBC,OAClBe,EAAQO,KAAK5B,EAASK,MAAMC,OAW5B,qBAKA,6BAAKiC,EAAa9B,QAClB,qBACEqC,IAAG,yCAAoCP,EAAaQ,eACpDC,IAAKT,EAAa9B,QAGpB,cAAC,IAAD,CACEzB,GAAI,CACFoB,SAAUsC,EAAM,QAChBrC,MAAM,2BAAML,EAASK,OAAhB,IAAuBV,GAAIuC,KAHpC,kBASA,eAAC,IAAD,WACE,cAAC,IAAD,CAAOe,KAAI,UAAKP,EAAL,WAAX,SACE,cAACT,EAAD,CAAMC,QAASA,MAGjB,cAAC,IAAD,CAAOe,KAAI,UAAKP,EAAL,qBA9BR,0CCrCI,SAASQ,IACtB,OAAO,oBAAIpE,UAAU,OAAd,4B,MCqCMqE,MA3Bf,WACE,OACE,sBAAKrE,UAAU,MAAf,UACE,oBAAIA,UAAU,kBAAd,oBACA,cAACD,EAAD,IAEA,eAAC,IAAD,WACE,cAAC,IAAD,CAAOE,OAAK,EAACkE,KAAK,IAAlB,SACE,cAACvC,EAAD,MAGF,cAAC,IAAD,CAAOuC,KAAK,mBAAZ,SACE,cAAC,EAAD,MAGF,cAAC,IAAD,CAAOA,KAAK,WAAZ,SACE,cAAC,EAAD,MAGF,cAAC,IAAD,UACE,cAACC,EAAD,a,YCxBVE,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,UACE,cAAC,EAAD,QAGJC,SAASC,eAAe,W","file":"static/js/main.5b66effb.chunk.js","sourcesContent":["import { NavLink } from 'react-router-dom'; //можно использовать и Link\n// import s from './navigation.module.scss'; - если подключать module.scss здесь, то использовать как и module.css - className={s.link}, а если подключать в общем файл App.scss - то использовать className=\"link\"\n\nexport default function Navigation() {\n  return (\n    <nav className=\"nav\">\n      <NavLink exact to=\"/\" className=\"link\" activeClassName=\"link--active\">\n        Home\n      </NavLink>\n\n      <NavLink to=\"/movies\" className=\"link\" activeClassName=\"link--active\">\n        Movies\n      </NavLink>\n    </nav>\n  );\n}\n","import axios from 'axios';\n\nconst API_KEY = '029b4bd853ef3dc8d52297bd7264794a';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\n// const BASE_URL = 'https://developers.themoviedb.org/3';\n\n// export default function fetchTrendingMovies() {\n//     fetch(`${BASE_URL}/trending/get-trending`)\n// };\n\n// export default function fetchSearchMovies() {\n//     fetch(`${BASE_URL}/search/search-movies`)\n// };\n\n// export default function fetchMovieDetails() {\n//     fetch(`${BASE_URL}/movies/get-movie-details`)\n// };\n\n// export default function fetchMovieCredits() {\n//     fetch(`${BASE_URL}/movies/get-movie-credits`)\n// };\n\n// export default function fetchMovieReviews() {\n//     fetch(`${BASE_URL}/movies/get-movie-reviews`)\n// };\n\nexport async function getTrendingFilms() {\n  const resp = await axios.get(`/trending/movie/week?api_key=${API_KEY}`);\n  return resp.data.results;\n}\n// в хом отображаются популярные\n\nexport async function getFilmsByQuery(query) {\n  const {\n    data: { results },\n  } = await axios.get('/search/movie?api_key=' + API_KEY + '&query=' + query);\n\n  return results;\n}\n\nexport async function getFilmById(id) {\n  const { data } = await axios(`/movie/${id}?api_key=${API_KEY}`);\n  return data;\n}\n\nexport async function getCastInfo(id) {\n  const res = await axios.get(`/movie/${id}/credits?api_key=${API_KEY}`);\n  //   console.log(res);\n  return res.data.cast;\n}\n\n// если нет jsx разметки, то расширение файла должно быть js\n","import { Link, useLocation } from 'react-router-dom';\n\nexport default function MoviesList({ moviesArr }) {\n  //   console.log(moviesArr);\n  const location = useLocation();\n\n  return (\n    <ul>\n      {moviesArr.map(movie => (\n        <li key={movie.id}>\n          <Link\n            to={{\n              pathname: `/movies/${movie.id}`,\n              state: {\n                from:\n                  location.pathname.name === '/'\n                    ? '/'\n                    : '/movies' + location.search,\n              },\n            }}\n          >\n            {movie.title}\n          </Link>\n        </li>\n      ))}\n    </ul>\n  );\n}\n","import { useState, useEffect } from 'react';\nimport { getTrendingFilms } from 'services/moviesApi';\n\nimport MoviesList from 'components/MoviesList/MoviesList';\n\nexport default function HomeView() {\n  const [movies, setMovies] = useState([]);\n\n  useEffect(() => {\n    getTrendingFilms().then(setMovies);\n  }, []);\n\n  return (\n    <div className=\"box\">\n      <h2 className=\"title\">Trending today</h2>\n      <ul></ul>\n\n      <MoviesList moviesArr={movies} />\n    </div>\n  );\n}\n","import { useState, useEffect } from 'react';\nimport { useHistory, useLocation } from 'react-router';\nimport { getFilmsByQuery } from '../../services/moviesApi';\n\nimport MoviesList from 'components/MoviesList/MoviesList';\n\nexport default function MovieView() {\n  // query - по которому будем отправлять запрос из инпута\n  const [query, setQuery] = useState('');\n  const [movies, setMovies] = useState([]);\n\n  const history = useHistory();\n  const location = useLocation();\n\n  const serchQuery = new URLSearchParams(location.search).get('query');\n  // console.log(serchQuery);\n\n  useEffect(() => {\n    if (serchQuery) {\n      getFilmsByQuery(serchQuery).then(setMovies);\n      setQuery(serchQuery);\n    }\n  }, [serchQuery]);\n\n  const onChange = e => {\n    setQuery(e.target.value);\n  };\n\n  const onSubmit = e => {\n    e.preventDefault();\n\n    getFilmsByQuery(query).then(setMovies);\n    history.push({ ...history.location, search: `?query=${query}` });\n  };\n\n  return (\n    <div className=\"box\">\n      {/* <h2>Movie Page</h2> */}\n      <form onSubmit={onSubmit}>\n        <input\n          onChange={onChange}\n          type=\"text\"\n          value={query}\n          className=\"input\"\n        />\n        <button type=\"submit\" className=\"btn\">\n          Search\n        </button>\n      </form>\n\n      <MoviesList moviesArr={movies} />\n    </div>\n  );\n}\n","import { useState, useEffect } from 'react';\nimport { useLocation } from 'react-router';\n\nimport { getCastInfo } from 'services/moviesApi';\n\nexport default function Cast({ movieId }) {\n  //   console.log(getCastInfo(movieId));\n\n  const [cast, setCast] = useState([]);\n\n  const location = useLocation();\n  //   console.log(location);\n\n  useEffect(() => {\n    getCastInfo(movieId).then(setCast);\n  }, [movieId]);\n  //   console.log(cast);\n\n  return (\n    <ul>\n      {cast.map(actor => (\n        <li key={actor.id}>\n          <p>{actor.name}</p>\n        </li>\n      ))}\n    </ul>\n  );\n}\n","import {\n  useParams,\n  useHistory,\n  useLocation,\n  Route,\n  Switch,\n  useRouteMatch,\n} from 'react-router'; //или через useRouteMatch\nimport { NavLink } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\n\nimport { getFilmById } from 'services/moviesApi';\nimport Cast from 'components/Cast/Cast';\n\nexport default function MovieDetailsPage() {\n  const [movieDetails, setMovieDetails] = useState(null);\n  const { movieId } = useParams();\n  // console.log(params);\n  const history = useHistory();\n  const location = useLocation();\n  const { url } = useRouteMatch();\n  // console.log(history);\n\n  useEffect(() => {\n    getFilmById(movieId).then(setMovieDetails);\n  }, [movieId]);\n\n  // console.log(movieDetails);\n\n  const handleGoBack = () => {\n    if (location.state?.from) {\n      history.push(location.state.from);\n    }\n  };\n\n  if (!movieDetails) {\n    // return <></>; //нужно что-то вернуть, хотя бы пустой фрагмент\n    return <p>Not found</p>; //нужно что-то вернуть, хотя бы пустой фрагмент\n  }\n\n  return (\n    <div>\n      <button //type=\"button\"\n        onClick={handleGoBack}\n      >\n        Go back\n      </button>\n      <h2>{movieDetails.title}</h2>\n      <img\n        src={`https://image.tmdb.org/t/p/w500${movieDetails.backdrop_path}`}\n        alt={movieDetails.title}\n      />\n\n      <NavLink\n        to={{\n          pathname: url + '/cast',\n          state: { ...location.state, id: movieId },\n        }}\n      >\n        Cast\n      </NavLink>\n\n      <Switch>\n        <Route path={`${url} / cast`}>\n          <Cast movieId={movieId} />\n        </Route>\n\n        <Route path={`${url}/ reviews`}></Route>\n      </Switch>\n    </div>\n  );\n}\n\n// добавить теги и еще\n// добавить картинку\n","export default function NotFoundView() {\n  return <h2 className=\"page\">Page not found</h2>;\n}\n","import { Switch, Route } from 'react-router';\n\nimport Navigation from 'components/Navigation/Navigation';\n\nimport HomeView from 'views/HomeView/HomeView';\nimport MoviesView from 'views/MoviesView/MoviesView';\nimport MovieDetailsView from 'views/MovieDetailsView/MovieDetailsView';\nimport NotFoundView from 'views/NotFoundView/NotFoundView';\n\nimport './App.scss';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1 className=\"visually-hidden\">Movies</h1>\n      <Navigation />\n\n      <Switch>\n        <Route exact path=\"/\">\n          <HomeView />\n        </Route>\n\n        <Route path=\"/movies/:movieId\">\n          <MoviesView />\n        </Route>\n\n        <Route path=\"/movies/\">\n          <MovieDetailsView />\n        </Route>\n\n        <Route>\n          <NotFoundView />\n        </Route>\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n// ---------------------------------\n// server side rendering. маршрутизация на сервере. реакт ренедриться на сервере и отправляется на клиент без перезагрузки.\n// хорошо с сео. для публичных приложен, должно хорошо индексироваться.\n// next.js - фреймворк на базе реакта for server side rendering.\n\n// client side rendering. маршрутизация на клиенте.\n// плохо с сео.отлично подходит под приложки с логин + пароль, пушо такая приложка не должна индексироваться и сео не нужно.\n\n// React Router DOM - библиотека.\n// маршрутизатор - следит за изменениями адресной строки и рендерит изменения.\n\n// single page application\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport App from './App';\nimport './index.scss';\nimport 'modern-normalize/modern-normalize.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// ---------------------------\n// BrowserRouter - маршрутизация, что бы следило за всей приложкой\n"],"sourceRoot":""}